// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OseredokManagementSystem.Server.Core;

#nullable disable

namespace OseredokManagementSystem.Server.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221110124935_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GymId = 1,
                            Salary = 6000m,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientPaymentId");

                    b.HasIndex("CoachId");

                    b.HasIndex("GymId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientPaymentId = 1,
                            CoachId = 1,
                            GymId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.ClientPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LastPaymentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentPerSession")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ClientPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100m,
                            LastPaymentDate = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastPaymentSum = 100m,
                            PaymentPerSession = 50m
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentagePerSession")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GymId = 1,
                            PercentagePerSession = 10m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "someAddress",
                            ClientCapacity = 5
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "coach"
                        },
                        new
                        {
                            Id = 3,
                            Name = "client"
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CoachId");

                    b.HasIndex("GymId");

                    b.HasIndex("SessionStatusId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            CoachId = 1,
                            GymId = 1,
                            SessionDate = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionStatusId = 5
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            CoachId = 1,
                            GymId = 1,
                            SessionDate = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionStatusId = 6
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 1,
                            CoachId = 1,
                            GymId = 1,
                            SessionDate = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionStatusId = 7
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.SessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("SessionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Name = "awaiting"
                        },
                        new
                        {
                            Id = 5,
                            Name = "accepted"
                        },
                        new
                        {
                            Id = 6,
                            Name = "inProcess"
                        },
                        new
                        {
                            Id = 7,
                            Name = "completed"
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ProfileImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2002, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nazar",
                            LastName = "Sachuk",
                            MiddleName = "Igorovych",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2096),
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2002, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nazar2",
                            LastName = "Sachuk2",
                            MiddleName = "Igorovych2",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2123),
                            RoleId = 3
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2002, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nazar3",
                            LastName = "Sachuk3",
                            MiddleName = "Igorovych3",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2126),
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(2002, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Max",
                            LastName = "Smirnov",
                            MiddleName = "lorem",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2128),
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(2002, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Masha",
                            LastName = "lorem",
                            MiddleName = "lorem",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2130),
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(2002, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Pasha",
                            LastName = "Mamchyr",
                            MiddleName = "Olexandrovych",
                            Password = "loremIpsum123",
                            PhoneNumber = "0509781078",
                            ProfileImgPath = "some/path",
                            RegDate = new DateTime(2022, 11, 10, 14, 49, 27, 867, DateTimeKind.Local).AddTicks(2132),
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Admin", b =>
                {
                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Gym", "Gym")
                        .WithMany()
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Client", b =>
                {
                    b.HasOne("OseredokManagementSystem.Server.Core.Models.ClientPayment", "ClientPayment")
                        .WithMany()
                        .HasForeignKey("ClientPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Coach", "Coach")
                        .WithMany("Clients")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Gym", "Gym")
                        .WithMany("Clients")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("OseredokManagementSystem.Server.Core.Models.Client", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientPayment");

                    b.Navigation("Coach");

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Coach", b =>
                {
                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Gym", "Gym")
                        .WithMany("Coaches")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("OseredokManagementSystem.Server.Core.Models.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Session", b =>
                {
                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Client", "Client")
                        .WithMany("Sessions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Coach", "Coach")
                        .WithMany("Sessions")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Gym", "Gym")
                        .WithMany("Sessions")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OseredokManagementSystem.Server.Core.Models.SessionStatus", "SessionStatus")
                        .WithMany()
                        .HasForeignKey("SessionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Coach");

                    b.Navigation("Gym");

                    b.Navigation("SessionStatus");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.User", b =>
                {
                    b.HasOne("OseredokManagementSystem.Server.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Client", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Coach", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.Gym", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Coaches");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("OseredokManagementSystem.Server.Core.Models.User", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("Coach")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
